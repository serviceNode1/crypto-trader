version: '3.8'

services:
  # PostgreSQL with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: crypto_postgres
    environment:
      POSTGRES_DB: crypto_ai
      POSTGRES_USER: crypto_user
      POSTGRES_PASSWORD: crypto_pass
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crypto_user -d crypto_ai"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: crypto_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Node.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto_app
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://crypto_user:crypto_pass@postgres:5432/crypto_ai
      REDIS_URL: redis://redis:6379
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: npm start

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
